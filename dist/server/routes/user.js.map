{"version":3,"sources":["../../../src/server/routes/user.js"],"names":["user","Router","get","req","res","session","destroy","logout","redirect","post","authenticate","status","json","name","newUser","body","created","Date","getTime","inputErrors","result","username","error","code","inputType","message","split"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,OAAO,kBAAQC,MAAR,EAAb;;AAEAD,KAAKE,GAAL,CAAS,SAAT,sBAAyC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrDD,MAAIE,OAAJ,CAAYC,OAAZ;AACAH,MAAII,MAAJ;AACAH,MAAII,QAAJ,CAAa,QAAb;AACD,CAJD;;AAMAR,KAAKS,IAAL,CAAU,QAAV,EAAoB,mBAASC,YAAT,CAAsB,OAAtB,CAApB,EAAoD,UAACP,GAAD,EAAMC,GAAN,EAAc;AAChEA,MAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMT,IAAID,GAAJ,CAAQH,IAAR,CAAaa,IAArB,EAArB;AACD,CAFD;;AAIAb,KAAKS,IAAL,CAAU,eAAV,EAA2B,gBAAON,GAAP,EAAYC,GAAZ,EAAoB;AAC7C,MAAMU,UAAUX,IAAIY,IAApB;AACAD,UAAQE,OAAR,GAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAEA,MAAMC,cAAc,gCAAqBL,OAArB,CAApB;;AAEA,MAAIK,WAAJ,EAAiB;AAAEf,QAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,WAArB;AAAoC;;AAEvD,MAAI;AACF,QAAMC,SAAS,MAAM,sBAAWN,OAAX,CAArB;;AAEAV,QAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,8BAAgDQ,OAAOC,QAAvD;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,QAAIA,MAAMC,IAAN,KAAe,KAAnB,EAA0B;AACxB;AACA,UAAMC,YAAYF,MAAMG,OAAN,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlB;AACAtB,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAIY,SAAJ,yBAArB;AACA;AACD;AACDpB,QAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEa,qCAAmCH,KAArC,EAArB;AACD;AACF,CArBD;;kBAuBetB,I","file":"user.js","sourcesContent":["import express from 'express';\nimport passport from 'passport';\n\nimport { CreateUser, validateRegistration } from '../models/user';\nimport ensureAuthenticated from '../auth/passport';\n\nconst user = express.Router();\n\nuser.get('/logout', ensureAuthenticated, (req, res) => {\n  req.session.destroy();\n  req.logout();\n  res.redirect('/login');\n});\n\nuser.post('/login', passport.authenticate('local'), (req, res) => {\n  res.status(200).json({ name: res.req.user.name });\n});\n\nuser.post('/registeruser', async (req, res) => {\n  const newUser = req.body;\n  newUser.created = new Date().getTime();\n\n  const inputErrors = validateRegistration(newUser);\n\n  if (inputErrors) { res.status(400).json(inputErrors); }\n\n  try {\n    const result = await CreateUser(newUser);\n\n    res.status(200).json(`Successfully registered ${result.username}`);\n  } catch (error) {\n    if (error.code === 11000) {\n      // If the same username already exists\n      const inputType = error.message.split('$')[1].split(' ')[0];\n      res.status(409).json([`${inputType} already registered`]);\n      return;\n    }\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  }\n});\n\nexport default user;\n"]}
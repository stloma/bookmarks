{"version":3,"sources":["../../../src/server/routes/user.js"],"names":["express","passport","CreateUser","validateRegistration","ensureAuthenticated","user","Router","get","req","res","session","destroy","logout","redirect","post","authenticate","status","json","name","newUser","body","created","Date","getTime","inputErrors","result","username","error","code","inputType","message","split"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,UAAT,EAAqBC,oBAArB,QAAiD,gBAAjD;AACA,OAAOC,mBAAP,MAAgC,kBAAhC;;AAEA,MAAMC,OAAOL,QAAQM,MAAR,EAAb;;AAEAD,KAAKE,GAAL,CAAS,SAAT,EAAoBH,mBAApB,EAAyC,CAACI,GAAD,EAAMC,GAAN,KAAc;AACrDD,MAAIE,OAAJ,CAAYC,OAAZ;AACAH,MAAII,MAAJ;AACAH,MAAII,QAAJ,CAAa,QAAb;AACD,CAJD;;AAMAR,KAAKS,IAAL,CAAU,QAAV,EAAoBb,SAASc,YAAT,CAAsB,OAAtB,CAApB,EAAoD,CAACP,GAAD,EAAMC,GAAN,KAAc;AAChEA,MAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMT,IAAID,GAAJ,CAAQH,IAAR,CAAaa,IAArB,EAArB;AACD,CAFD;;AAIAb,KAAKS,IAAL,CAAU,eAAV;AAAA,+BAA2B,WAAON,GAAP,EAAYC,GAAZ,EAAoB;AAC7C,UAAMU,UAAUX,IAAIY,IAApB;AACAD,YAAQE,OAAR,GAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAEA,UAAMC,cAAcrB,qBAAqBgB,OAArB,CAApB;;AAEA,QAAIK,WAAJ,EAAiB;AAAEf,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,WAArB;AAAoC;;AAEvD,QAAI;AACF,YAAMC,SAAS,MAAMvB,WAAWiB,OAAX,CAArB;;AAEAV,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,2BAA0BQ,OAAOC,QAAS,EAAhE;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAIA,MAAMC,IAAN,KAAe,KAAnB,EAA0B;AACxB;AACA,cAAMC,YAAYF,MAAMG,OAAN,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlB;AACAtB,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAE,GAAEY,SAAU,qBAAd,CAArB;AACA;AACD;AACDpB,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEa,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD;AACF,GArBD;;AAAA;AAAA;AAAA;AAAA;;AAuBA,eAAetB,IAAf","file":"user.js","sourcesContent":["import express from 'express';\nimport passport from 'passport';\n\nimport { CreateUser, validateRegistration } from '../models/user';\nimport ensureAuthenticated from '../auth/passport';\n\nconst user = express.Router();\n\nuser.get('/logout', ensureAuthenticated, (req, res) => {\n  req.session.destroy();\n  req.logout();\n  res.redirect('/login');\n});\n\nuser.post('/login', passport.authenticate('local'), (req, res) => {\n  res.status(200).json({ name: res.req.user.name });\n});\n\nuser.post('/registeruser', async (req, res) => {\n  const newUser = req.body;\n  newUser.created = new Date().getTime();\n\n  const inputErrors = validateRegistration(newUser);\n\n  if (inputErrors) { res.status(400).json(inputErrors); }\n\n  try {\n    const result = await CreateUser(newUser);\n\n    res.status(200).json(`Successfully registered ${result.username}`);\n  } catch (error) {\n    if (error.code === 11000) {\n      // If the same username already exists\n      const inputType = error.message.split('$')[1].split(' ')[0];\n      res.status(409).json([`${inputType} already registered`]);\n      return;\n    }\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  }\n});\n\nexport default user;\n"]}
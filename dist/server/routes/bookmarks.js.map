{"version":3,"sources":["../../../src/server/routes/bookmarks.js"],"names":["express","ObjectId","ensureAuthenticated","addBookmark","getBookmarks","deleteBookmark","editBookmark","discover","validateBookmark","validateEdit","bookmarks","Router","get","req","res","status","json","name","user","userDb","session","passport","result","error","message","post","newBookmark","body","created","Date","getTime","errors","then","send","catch","delete","bookmarkId","params","id","patch","site","updated"],"mappings":"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","file":"bookmarks.js","sourcesContent":["import express from 'express';\nimport { ObjectId } from 'mongodb';\n\nimport ensureAuthenticated from '../auth/passport';\nimport { addBookmark, getBookmarks, deleteBookmark, editBookmark, discover } from '../models/db';\nimport { validateBookmark, validateEdit } from '../models/bookmark';\n\nconst bookmarks = express.Router();\n\nbookmarks.get('/protected', ensureAuthenticated, (req, res) => {\n  res.status(200).json({ name: res.req.user.name });\n});\n\n\nbookmarks.get('/bookmarks', ensureAuthenticated, async (req, res) => {\n  const userDb = req.session.passport.user;\n\n  try {\n    const result = await getBookmarks(userDb);\n    res.json(result);\n  } catch (error) { res.status(500).json({ message: `Internal Server Error: ${error}` }); }\n});\n\n\nbookmarks.get('/discover', ensureAuthenticated, async (req, res) => {\n  const userDb = req.session.passport.user;\n\n  try {\n    const result = await discover(userDb);\n    res.json(result);\n  } catch (error) { res.status(500).json({ message: `Internal Server Error: ${error}` }); }\n});\n\nbookmarks.post('/bookmarks', ensureAuthenticated, (req, res) => {\n  const userDb = req.session.passport.user;\n  const newBookmark = req.body;\n  newBookmark.created = new Date().getTime();\n  const errors = validateBookmark(newBookmark);\n  if (errors) {\n    res.status(400).json(errors);\n    return;\n  }\n\n  addBookmark(`bookmarks.${userDb}`, newBookmark)\n    .then(() => res.status(200).send('1 record inserted'))\n    .catch(error => res.status(500).json({ message: `Internal Server Error: ${error}` }));\n});\n\nbookmarks.delete('/bookmarks/:id', ensureAuthenticated, async (req, res) => {\n  const userDb = req.session.passport.user;\n  let bookmarkId;\n  try {\n    bookmarkId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid id format: ${error}` });\n    return;\n  }\n\n  try {\n    await deleteBookmark(`bookmarks.${userDb}`, bookmarkId);\n    res.status(200).json({ message: 'Successfully deleted object' });\n  } catch (error) {\n    if (error.message === '404') {\n      res.status(404).json({ message: 'Bookmark not found' });\n      return;\n    }\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  }\n});\n\nbookmarks.patch('/bookmarks', ensureAuthenticated, async (req, res) => {\n  const userDb = req.session.passport.user;\n  const site = req.body;\n  site.updated = new Date().getTime();\n\n  const errors = validateEdit(site);\n  if (errors) {\n    res.status(422).json(errors);\n    return;\n  }\n\n  try {\n    await editBookmark(`bookmarks.${userDb}`, site);\n    res.status(200).json({ message: 'Edit site success' });\n  } catch (error) {\n    res.status(422).json({ message: `Invalid id format: ${error}` });\n  }\n});\n\nexport default bookmarks;\n"]}
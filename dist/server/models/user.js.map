{"version":3,"sources":["../../../src/server/models/user.js"],"names":["bcrypt","db","ComparePassword","candidatePassword","hash","isMatch","compare","error","Error","CreateUser","user","newUser","passHash","password","bookmarkDb","collection","insertOne","registerFieldType","username","created","validateRegistration","site","errors","emailPattern","Object","keys","forEach","field","type","push","email","match","length"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,EAAT,QAAmB,MAAnB;;AAEA,OAAO,MAAMC;AAAA,+BAAkB,WAAOC,iBAAP,EAA0BC,IAA1B,EAAmC;AAChE,QAAI;AACF,YAAMC,UAAU,MAAML,OAAOM,OAAP,CAAeH,iBAAf,EAAkCC,IAAlC,CAAtB;AACA,aAAOC,OAAP;AACD,KAHD,CAGE,OAAOE,KAAP,EAAc;AAAE,YAAMC,MAAMD,KAAN,CAAN;AAAqB;AACxC,GALY;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAOP,OAAO,MAAME;AAAA,gCAAa,WAAOC,IAAP,EAAgB;AACxC,UAAMC,UAAUD,IAAhB;AACA,QAAI;AACF,YAAME,WAAW,MAAMZ,OAAOI,IAAP,CAAYO,QAAQE,QAApB,EAA8B,EAA9B,CAAvB;AACAF,cAAQE,QAAR,GAAmBD,QAAnB;AACA,aAAO,MAAMX,GAAGa,UAAH,CAAcC,UAAd,CAAyB,OAAzB,EAAkCC,SAAlC,CAA4CL,OAA5C,CAAb;AACD,KAJD,CAIE,OAAOJ,KAAP,EAAc;AAAE,YAAMC,MAAMD,KAAN,CAAN;AAAqB;AACxC,GAPY;;AAAA;AAAA;AAAA;AAAA,IAAN;;AASP,MAAMU,oBAAoB;AACxBC,YAAU,UADc;AAExBL,YAAU,UAFc;AAGxBM,WAAS;AAHe,CAA1B;;AAMA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,QAAMC,SAAS,EAAf;AACA,QAAMC,eAAe,yCAArB;AACAC,SAAOC,IAAP,CAAYR,iBAAZ,EAA+BS,OAA/B,CAAwCC,KAAD,IAAW;AAChD,UAAMC,OAAOX,kBAAkBU,KAAlB,CAAb;AACA,QAAIC,SAAS,UAAT,IAAuB,CAACP,KAAKM,KAAL,CAA5B,EAAyC;AACvCL,aAAOO,IAAP,CAAa,GAAEF,KAAM,cAArB;AACD;AACF,GALD;AAMA,QAAMG,QAAQT,KAAKS,KAAnB;AACA,MAAIA,SAAS,CAACA,MAAMC,KAAN,CAAYR,YAAZ,CAAd,EAAyC;AACvCD,WAAOO,IAAP,CAAY,oCAAZ;AACD;AACD,MAAIP,OAAOU,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAOV,MAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED,SAASF,oBAAT","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport { db } from './db';\n\nexport const ComparePassword = async (candidatePassword, hash) => {\n  try {\n    const isMatch = await bcrypt.compare(candidatePassword, hash);\n    return isMatch;\n  } catch (error) { throw Error(error); }\n};\n\nexport const CreateUser = async (user) => {\n  const newUser = user;\n  try {\n    const passHash = await bcrypt.hash(newUser.password, 10);\n    newUser.password = passHash;\n    return await db.bookmarkDb.collection('users').insertOne(newUser);\n  } catch (error) { throw Error(error); }\n};\n\nconst registerFieldType = {\n  username: 'required',\n  password: 'required',\n  created: 'required'\n};\n\nfunction validateRegistration(site) {\n  const errors = [];\n  const emailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n  Object.keys(registerFieldType).forEach((field) => {\n    const type = registerFieldType[field];\n    if (type === 'required' && !site[field]) {\n      errors.push(`${field} is required`);\n    }\n  });\n  const email = site.email;\n  if (email && !email.match(emailPattern)) {\n    errors.push('Please enter a valid email address');\n  }\n  if (errors.length > 0) {\n    return errors;\n  }\n  return null;\n}\n\nexport { validateRegistration };\n"]}
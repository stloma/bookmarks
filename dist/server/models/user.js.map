{"version":3,"sources":["../../../src/server/models/user.js"],"names":["ComparePassword","candidatePassword","hash","isMatch","compare","error","Error","CreateUser","user","newUser","passHash","password","bookmarkDb","collection","insertOne","registerFieldType","username","created","validateRegistration","site","errors","emailPattern","Object","keys","forEach","field","type","push","email","match","length"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA,4CAAkB,eAAlBA,eAAkB,CAAOC,iBAAP,EAA0BC,IAA1B,EAAmC;AAChE,MAAI;AACF,QAAMC,UAAU,MAAM,iBAAOC,OAAP,CAAeH,iBAAf,EAAkCC,IAAlC,CAAtB;AACA,WAAOC,OAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AAAE,UAAMC,MAAMD,KAAN,CAAN;AAAqB;AACxC,CALM;;AAOA,IAAME,kCAAa,eAAbA,UAAa,CAAOC,IAAP,EAAgB;AACxC,MAAMC,UAAUD,IAAhB;AACA,MAAI;AACF,QAAME,WAAW,MAAM,iBAAOR,IAAP,CAAYO,QAAQE,QAApB,EAA8B,EAA9B,CAAvB;AACAF,YAAQE,QAAR,GAAmBD,QAAnB;AACA,WAAO,MAAM,OAAGE,UAAH,CAAcC,UAAd,CAAyB,OAAzB,EAAkCC,SAAlC,CAA4CL,OAA5C,CAAb;AACD,GAJD,CAIE,OAAOJ,KAAP,EAAc;AAAE,UAAMC,MAAMD,KAAN,CAAN;AAAqB;AACxC,CAPM;;AASP,IAAMU,oBAAoB;AACxBC,YAAU,UADc;AAExBL,YAAU,UAFc;AAGxBM,WAAS;AAHe,CAA1B;;AAMA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,MAAMC,SAAS,EAAf;AACA,MAAMC,eAAe,yCAArB;AACAC,SAAOC,IAAP,CAAYR,iBAAZ,EAA+BS,OAA/B,CAAuC,UAACC,KAAD,EAAW;AAChD,QAAMC,OAAOX,kBAAkBU,KAAlB,CAAb;AACA,QAAIC,SAAS,UAAT,IAAuB,CAACP,KAAKM,KAAL,CAA5B,EAAyC;AACvCL,aAAOO,IAAP,CAAeF,KAAf;AACD;AACF,GALD;AAMA,MAAMG,QAAQT,KAAKS,KAAnB;AACA,MAAIA,SAAS,CAACA,MAAMC,KAAN,CAAYR,YAAZ,CAAd,EAAyC;AACvCD,WAAOO,IAAP,CAAY,oCAAZ;AACD;AACD,MAAIP,OAAOU,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAOV,MAAP;AACD;AACD,SAAO,IAAP;AACD;;QAEQF,oB,GAAAA,oB","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport { db } from './db';\n\nexport const ComparePassword = async (candidatePassword, hash) => {\n  try {\n    const isMatch = await bcrypt.compare(candidatePassword, hash);\n    return isMatch;\n  } catch (error) { throw Error(error); }\n};\n\nexport const CreateUser = async (user) => {\n  const newUser = user;\n  try {\n    const passHash = await bcrypt.hash(newUser.password, 10);\n    newUser.password = passHash;\n    return await db.bookmarkDb.collection('users').insertOne(newUser);\n  } catch (error) { throw Error(error); }\n};\n\nconst registerFieldType = {\n  username: 'required',\n  password: 'required',\n  created: 'required'\n};\n\nfunction validateRegistration(site) {\n  const errors = [];\n  const emailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n  Object.keys(registerFieldType).forEach((field) => {\n    const type = registerFieldType[field];\n    if (type === 'required' && !site[field]) {\n      errors.push(`${field} is required`);\n    }\n  });\n  const email = site.email;\n  if (email && !email.match(emailPattern)) {\n    errors.push('Please enter a valid email address');\n  }\n  if (errors.length > 0) {\n    return errors;\n  }\n  return null;\n}\n\nexport { validateRegistration };\n"]}
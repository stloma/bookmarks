{"version":3,"sources":["../../src/server/server.js"],"names":["express","bodyParser","SourceMapSupport","path","session","passport","cookieParser","ComparePassword","user","bookmarks","db","store","install","app","LocalStrategy","require","Strategy","use","static","urlencoded","extended","json","secret","cookie","maxAge","saveUninitialized","resave","initialize","serializeUser","loginUser","done","_id","deserializeUser","username","password","userExists","bookmarkDb","collection","findOne","isMatch","error","listen","console","log","get","req","res","sendFile","resolve"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,EAAT,EAAaC,KAAb,QAA0B,aAA1B;;AAEAT,iBAAiBU,OAAjB;;AAEA,MAAMC,MAAMb,SAAZ;AACA,MAAMc,gBAAgBC,QAAQ,gBAAR,EAA0BC,QAAhD;;AAEAH,IAAII,GAAJ,CAAQjB,QAAQkB,MAAR,CAAe,MAAf,CAAR;AACAL,IAAII,GAAJ,CAAQX,cAAR;AACAO,IAAII,GAAJ,CAAQhB,WAAWkB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQhB,WAAWoB,IAAX,EAAR;;AAEAR,IAAII,GAAJ,CAAQb,QAAQ;AACdkB,UAAQ,+CADM;AAEdC,UAAQ;AACNC,YAAQ,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CADxB,CAC0B;AAD1B,GAFM;AAKdb,OALc;AAMdc,qBAAmB,IANL;AAOdC,UAAQ;AAPM,CAAR,CAAR;;AAUAb,IAAII,GAAJ,CAAQZ,SAASsB,UAAT,EAAR;AACAd,IAAII,GAAJ,CAAQZ,SAASD,OAAT,EAAR;;AAEAC,SAASuB,aAAT,CAAuB,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAC1CA,OAAK,IAAL,EAAWD,UAAUE,GAArB;AACD,CAFD;;AAIA1B,SAAS2B,eAAT;AAAA,+BAAyB,WAAOH,SAAP,EAAkBC,IAAlB,EAA2B;AAClDA,SAAK,IAAL,EAAWD,SAAX;AACD,GAFD;;AAAA;AAAA;AAAA;AAAA;;AAIAxB,SAASY,GAAT,CAAa,IAAIH,aAAJ;AAAA,gCACV,WAAOmB,QAAP,EAAiBC,QAAjB,EAA2BJ,IAA3B,EAAoC;AACnC,QAAI;AACF,YAAMK,aAAa,MAAMzB,GAAG0B,UAAH,CAAcC,UAAd,CAAyB,OAAzB,EAAkCC,OAAlC,CAA0C,EAAEL,QAAF,EAA1C,CAAzB;AACA,UAAI,CAACE,UAAL,EAAiB;AACf,eAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACD,YAAMS,UAAU,MAAMhC,gBAAgB2B,QAAhB,EAA0BC,WAAWD,QAArC,CAAtB;AACA,UAAI,CAACK,OAAL,EAAc;AACZ,eAAOT,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACD,aAAOA,KAAK,IAAL,EAAWK,UAAX,CAAP;AACD,KAVD,CAUE,OAAOK,KAAP,EAAc;AACd,aAAOV,KAAKU,KAAL,CAAP;AACD;AACF,GAfU;;AAAA;AAAA;AAAA;AAAA,KAAb;;AAkBA3B,IAAII,GAAJ,CAAQ,MAAR,EAAgBT,IAAhB;AACAK,IAAII,GAAJ,CAAQ,MAAR,EAAgBR,SAAhB;;AAEAI,IAAI4B,MAAJ,CAAW,IAAX,EAAiB,WAAjB,EAA8B,MAAM;AAClCC,UAAQC,GAAR,CAAY,0BAAZ;AACD,CAFD;;AAIA9B,IAAI+B,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAIC,QAAJ,CAAa5C,KAAK6C,OAAL,CAAa,iBAAb,CAAb;AACD,CAFD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport SourceMapSupport from 'source-map-support';\nimport path from 'path';\nimport session from 'express-session';\nimport passport from 'passport';\nimport cookieParser from 'cookie-parser';\n\nimport { ComparePassword } from './models/user';\nimport user from './routes/user';\nimport bookmarks from './routes/bookmarks';\nimport { db, store } from './models/db';\n\nSourceMapSupport.install();\n\nconst app = express();\nconst LocalStrategy = require('passport-local').Strategy;\n\napp.use(express.static('dist'));\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\napp.use(session({\n  secret: 'jkfd09U&*^F&*56<F5>8df*(DF789SCy89S89c89d*SF9',\n  cookie: {\n    maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n  },\n  store,\n  saveUninitialized: true,\n  resave: true\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n\npassport.serializeUser((loginUser, done) => {\n  done(null, loginUser._id);\n});\n\npassport.deserializeUser(async (loginUser, done) => {\n  done(null, loginUser);\n});\n\npassport.use(new LocalStrategy(\n  (async (username, password, done) => {\n    try {\n      const userExists = await db.bookmarkDb.collection('users').findOne({ username });\n      if (!userExists) {\n        return done(null, false);\n      }\n      const isMatch = await ComparePassword(password, userExists.password);\n      if (!isMatch) {\n        return done(null, false);\n      }\n      return done(null, userExists);\n    } catch (error) {\n      return done(error);\n    }\n  })\n));\n\napp.use('/api', user);\napp.use('/api', bookmarks);\n\napp.listen(3000, '127.0.0.1', () => {\n  console.log('App started on port 3000');\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('dist/index.html'));\n});\n"]}